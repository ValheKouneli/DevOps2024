services:
  frontend-1:
    image: node-docker
    container_name: my_frontend_1
    networks:
      - loadbalancing
      - backend
    expose:
      - "${FE_PORT}"
    environment:
      - PORT=${FE_PORT}
      - BE_PORT=${BE_PORT} 
      - FE_WAIT_TIME_MS=${FE_WAIT_TIME_MS}
    build:
      context: app1
      dockerfile: Dockerfile
    depends_on:
      - backend

  frontend-2:
    image: node-docker
    container_name: my_frontend_2
    networks:
      - loadbalancing
      - backend
    expose:
      - "${FE_PORT}"
    environment:
      - PORT=${FE_PORT}
      - BE_PORT=${BE_PORT}
      - FE_WAIT_TIME_MS=${FE_WAIT_TIME_MS}
    build:
      context: app1
      dockerfile: Dockerfile
    depends_on:
      - backend


  frontend-3:
    image: node-docker
    container_name: my_frontend_3
    networks:
      - loadbalancing
      - backend
    expose:
      - "${FE_PORT}"
    environment:
      - PORT=${FE_PORT}
      - BE_PORT=${BE_PORT}
      - FE_WAIT_TIME_MS=${FE_WAIT_TIME_MS}
    build:
      context: app1
      dockerfile: Dockerfile
    depends_on:
      - backend


  backend:
    image: go-docker
    container_name: my_backend
    networks:
      - backend
    expose:
      - "${BE_PORT}"
    environment:
      - PORT=${BE_PORT}
    build:
      context: app2
      dockerfile: Dockerfile
    volumes:     
      - /var/run/docker.sock:/var/run/docker.sock

 
  nginx:
    image: nginx:1-alpine
    container_name: my_nginx
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd
      - ./nginx/index.html:/var/www/index.html
    command: /bin/sh -c "envsubst '$${FE_PORT} $${SERVER_PORT}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    environment:
      - FE_PORT=${FE_PORT}
      - SERVER_PORT=${SERVER_PORT}
    networks:
      - loadbalancing
      - backend
    depends_on:
      - frontend-1
      - frontend-2
      - frontend-3
      - backend

networks:
  loadbalancing:
    driver: bridge
  backend:
